# First and Last

- Example 1:

- Sort required to work with first and last
- We group by a
a : 0 - b : 23
a : 0 - b : 45
a : 0 - b : 97
a : 1 - b : 17
a : 1 - b : 68
a : 1 - b : 73

First: (a : 0 - b : 23) and (a : 1 - b : 17)
Last:  (a : 0 - b : 97) and (a : 1 - b : 73)

- Example 2:

db.zips.aggregate([
	/* get the population of every city in every state */
	{$group:
	 {
		_id : { state: "$state", city: "$city"},
		population: {$sum : "$pop"}, 
	 }
	},
	 /* sort by state, population */
	{$sort:
	 {"_id.state":1, "population":-1}
	},
	/* group by state, get the first item in each group */
	{$group:
	 {
		_id : "$_id.state",
		city: {$first: "$_id.city"},
		population: {$first:"$population"}
	 }
	}, 
	
	/* now sort by state again */
 	{$sort:
	 { "_id" : 1 }
	}	

])


- Question: 
Revisiting $first and $last

Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }
What would be the value of c in the result from this aggregation query
db.fun.aggregate([
    {$match:{a:0}},
    {$sort:{c:-1}}, 
    {$group:{_id:"$a", c:{$first:"$c"}}}
])


21

(OK) 54

97

5
